apiVersion: v1
data:
  password: dmVyeXNlY3JldAo
kind: Secret
metadata:
  annotations:
  name: xbakvinn
  namespace: default
  resourceVersion: "109999"
type: Opaque
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: toyota-cronjob
spec:
  schedule: '30 17 * * 1-5'
  concurrencyPolicy: Replace
  jobTemplate:
    metadata:
      labels:
        app: toyota-cron
        origin: branch
        environment: dev
    spec:
      template:
        spec:
          containers:
            - name: toyota-cron
              image: DOCKER_IMAGE
              imagePullPolicy: IfNotPresent
              command: ['node', '.dist/job/run']
              env:
                - name: XBAKVINN_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: xbakvinn
                      key: password
                - name: SERVER_EVENTS_CLUSTER_API
                  value: http://server-events-service
          restartPolicy: OnFailure
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: toyota-deployment
spec:
  replicas: 2
  template:
    metadata:
      labels:
        app: toyota-pod
        environment: dev
        origin: branch
    spec:
      containers:
        - name: toyota-pod
          image: DOCKER_IMAGE
          imagePullPolicy: IfNotPresent
          env:
            - name: DRAGON_ENV
              value: test
            - name: SERVICE_SUFFIX
              value: dev.domain.com
            - name: IN_CLUSTER
              value: 'YES'
            - name: FEATURES_ON
              value: 'true'
          livenessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 60
            timeoutSeconds: 4
            failureThreshold: 3
            periodSeconds: 5
          readinessProbe:
            httpGet:
              path: /
              port: 80
            initialDelaySeconds: 15
            timeoutSeconds: 4

          ports:
            - containerPort: 80
              name: httpport
---
apiVersion: v1
kind: Service
metadata:
  name: toyota
  labels:
    name: toyota
    environment: dev
spec:
  ports:
    - port: 80 # the port that this service should serve on
      # the container on each pod to connect to, can be a name
      # (e.g. 'www') or a number (e.g. 80)
      name: serviceport
      targetPort: 80
      protocol: TCP
  # just like the selector in the replication controller,
  # but this time it identifies the set of pods to load balance
  # traffic to.
  selector:
    app: toyota-pod
    origin: branch
    environment: dev
  sessionAffinity: ClientIP
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: toyota-ingress
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
spec:
  rules:
    - host: toyota.dev.domain.com
      http:
        paths:
          - backend:
              serviceName: toyota
              servicePort: 80
